import numpy as np
from PyEFVLib.Point import Point

def areCoplanar(p1,p2,p3,p4):
	return bool( np.dot( (p2-p1), np.cross((p3-p1), (p4-p1)) ) < 1e-10 )

class Shape:
	"""
	The class shape is mainly used to store previously calculated parameters. It stores
	the shape functions and their derivatives at different points across the element, 
	namely at the innerFaces centroids, at the subelement centroids, and at the outerFaces
	centroids.

	Attributes
	----------
	dimension							: int
		2 for Triangle and Quadrilateral, and 3 for Tetrahedron, Hexahedron, Prism and Pyramid
	numberOfInnerFaces					: int
		Number of divisions into subelements
	numberOfFacets						: int
		Number of external faces that the shape has
	subelementTransformedVolumes		: np.ndarray((m,)	   , dtype=float)
		Volumes of each subelement section in the local coordinates
	innerFaceShapeFunctionValues		: np.ndarray((m, m)	   , dtype=float)
		N evaluated at the centroid of each innerFace
	innerFaceShapeFunctionDerivatives	: np.ndarray((m, m, d) , dtype=float)
		D evaluated at the centroid of each innerFace
	innerFaceNeighborVertices			: np.ndarray((m, d)	   , dtype= int )
		Local indexes of the vertices that are next to each innerFace
	subelementShapeFunctionValues		: np.ndarray((m, m)	   , dtype=float)
		N evaluated at the centroid of each subelement
	subelementShapeFunctionDerivatives	: np.ndarray((m, m, d) , dtype=float)
		D evaluated at the centroid of each subelement
	facetVerticesIndexes				: np.ndarray((m, d)	   , dtype= int )
		List of the vertices local indices that define each facet
	outerFaceShapeFunctionValues		: np.ndarray((m, d, m) , dtype=float)
		N evaluated at the centroid of each outerFace
	outerFaceShapeFunctionDerivatives	: np.ndarray((m, d, m, d) , dtype=float)
		D evaluated at the centroid of each outerFace
	vertexShapeFunctionDerivatives		: np.ndarray((m, m, d) , dtype=float)
		D evaluated at each vertex

	Methods
	----------
	_is(element: PyEFVLib.Element) -> bool:
		Tells whether that element is compatible with the shape. Mainly counts the
		vertices in order to determine it

	"""

class Triangle(Shape):
	dimension						   = 2
	numberOfInnerFaces				   = 3
	numberOfFacets					   = 3
	subelementTransformedVolumes	   = np.array([1.0 / 6.0, 1.0 / 6.0, 1.0 / 6.0])
	innerFaceShapeFunctionValues 	   = np.array([[5.0/12.0, 5.0/12.0, 1.0/6.0],[1.0/6.0, 5.0/12.0, 5.0/12.0], [5.0/12.0, 1.0/6.0, 5.0/12.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1], [1, 2], [2, 0]])
	subelementShapeFunctionValues 	   = np.array([[7.0/12.0, 5.0/24.0, 5.0/24.0], [5.0/24.0, 7.0/12.0, 5.0/24.0], [5.0/24.0, 5.0/24.0, 7.0/12.0]])
	subelementShapeFunctionDerivatives = np.array([[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]]])
	facetVerticesIndexes 			   = np.array([[1, 0], [2, 1], [0, 2]])
	outerFaceShapeFunctionValues 	   = np.array([[[1.0/4.0, 3.0/4.0, 0.0/1.0], [3.0/4.0, 1.0/4.0, 0.0/1.0]], [[0.0/1.0, 1.0/4.0, 3.0/4.0], [0.0/1.0, 3.0/4.0, 1.0/4.0]], [[3.0/4.0, 0.0/1.0, 1.0/4.0], [1.0/4.0, 0.0/1.0, 3.0/4.0]]])
	vertexShapeFunctionDerivatives	   = np.array([[[-1.0,-1.0], [1.0,0.0], [0.0,1.0]], [[-1.0,-1.0], [1.0,0.0], [0.0,1.0]], [[-1.0,-1.0], [1.0,0.0], [0.0,1.0]]])
	outerFaceShapeFunctionDerivatives  = np.array([[[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0]]]])

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 3 then it's a Triangle.
		"""
		if len(element.vertices) == 3:
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		vertex1 = elementVertices[Triangle.innerFaceNeighborVertices[local][0]]
		vertex2 = elementVertices[Triangle.innerFaceNeighborVertices[local][1]]
		areaVectorCoords = ( elementCentroid - (vertex1 + vertex2)/2.0 ).getCoordinates()
		return Point(areaVectorCoords[1], -areaVectorCoords[0], 0.0)

class Quadrilateral(Shape):
	dimension						   = 2
	numberOfInnerFaces				   = 4
	numberOfFacets 					   = 4
	subelementTransformedVolumes	   = np.array([1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0])
	innerFaceShapeFunctionValues	   = np.array([[3.0/8.0, 3.0/8.0, 1.0/8.0, 1.0/8.0], [1.0/8.0, 3.0/8.0, 3.0/8.0, 1.0/8.0], [1.0/8.0, 1.0/8.0, 3.0/8.0, 3.0/8.0], [3.0/8.0, 1.0/8.0, 1.0/8.0, 3.0/8.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-3.0/4.0, -1.0/2.0], [3.0/4.0, -1.0/2.0], [1.0/4.0, 1.0/2.0], [-1.0/4.0, 1.0/2.0]], [[-1.0/2.0, -1.0/4.0], [1.0/2.0, -3.0/4.0], [1.0/2.0, 3.0/4.0], [-1.0/2.0, 1.0/4.0]], [[-1.0/4.0, -1.0/2.0], [1.0/4.0, -1.0/2.0], [3.0/4.0, 1.0/2.0], [-3.0/4.0, 1.0/2.0]], [[-1.0/2.0, -3.0/4.0], [1.0/2.0, -1.0/4.0], [1.0/2.0, 1.0/4.0], [-1.0/2.0, 3.0/4.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1], [1, 2], [2, 3], [3, 0]])
	subelementShapeFunctionValues	   = np.array([[9.0/16.0, 3.0/16.0, 1.0/16.0, 3.0/16.0], [3.0/16.0, 9.0/16.0, 3.0/16.0, 1.0/16.0], [1.0/16.0, 3.0/16.0, 9.0/16.0, 3.0/16.0], [3.0/16.0, 1.0/16.0, 3.0/16.0, 9.0/16.0]])
	subelementShapeFunctionDerivatives = np.array([[[-3.0/4.0, -3.0/4.0], [3.0/4.0, -1.0/4.0], [1.0/4.0, 1.0/4.0], [-1.0/4.0, 3.0/4.0]], [[-3.0/4.0, -1.0/4.0], [3.0/4.0, -3.0/4.0], [1.0/4.0, 3.0/4.0], [-1.0/4.0, 1.0/4.0]], [[-1.0/4.0, -1.0/4.0], [1.0/4.0, -3.0/4.0], [3.0/4.0, 3.0/4.0], [-3.0/4.0, 1.0/4.0]], [[-1.0/4.0, -3.0/4.0], [1.0/4.0, -1.0/4.0], [3.0/4.0, 1.0/4.0], [-3.0/4.0, 3.0/4.0]]])
	facetVerticesIndexes 			   = np.array([[1, 0], [2, 1], [3, 2], [0, 3]])
	outerFaceShapeFunctionValues	   = np.array([[[1.0/4.0, 3.0/4.0, 0.0/1.0, 0.0/1.0], [3.0/4.0, 1.0/4.0, 0.0/1.0, 0.0/1.0]], [[0.0/1.0, 1.0/4.0, 3.0/4.0, 0.0/1.0], [0.0/1.0, 3.0/4.0, 1.0/4.0, 0.0/1.0]], [[0.0/1.0, 0.0/1.0, 1.0/4.0, 3.0/4.0], [0.0/1.0, 0.0/1.0, 3.0/4.0, 1.0/4.0]], [[3.0/4.0, 0.0/1.0, 0.0/1.0, 1.0/4.0], [1.0/4.0, 0.0/1.0, 0.0/1.0, 3.0/4.0]]])
	vertexShapeFunctionDerivatives	   = np.array([[[-1.0,-1.0], [1.0,0.0], [0.0,0.0], [0.0,1.0]], [[-1.0,0.0], [1.0,0.0], [0.0,1.0], [0.0,0.0]], [[0.0,0.0], [0.0,-1.0], [1.0,1.0], [-1.0,0.0]], [[0.0,-1.0], [0.0,0.0], [1.0,0.0], [0.0,1.0]]])
	outerFaceShapeFunctionDerivatives  = np.array([[[[-1.0/1.0, -1.0/4.0], [1.0/1.0, -3.0/4.0], [0.0/1.0, 3.0/4.0], [0.0/1.0, 1.0/4.0]],[[-1.0/1.0, -3.0/4.0], [1.0/1.0, -1.0/4.0], [0.0/1.0, 1.0/4.0], [0.0/1.0, 3.0/4.0]]],[[[-1.0/4.0, 0.0/1.0], [1.0/4.0, -1.0/1.0], [3.0/4.0, 1.0/1.0], [-3.0/4.0, 0.0/1.0]],[[-3.0/4.0, 0.0/1.0], [3.0/4.0, -1.0/1.0], [1.0/4.0, 1.0/1.0], [-1.0/4.0, 0.0/1.0]]],[[[0.0/1.0, -3.0/4.0], [0.0/1.0, -1.0/4.0], [1.0/1.0, 1.0/4.0], [-1.0/1.0, 3.0/4.0]],[[0.0/1.0, -1.0/4.0], [0.0/1.0, -3.0/4.0], [1.0/1.0, 3.0/4.0], [-1.0/1.0, 1.0/4.0]]],[[[-3.0/4.0, -1.0/1.0], [3.0/4.0, 0.0/1.0], [1.0/4.0, 0.0/1.0], [-1.0/4.0, 1.0/1.0]],[[-1.0/4.0, -1.0/1.0], [1.0/4.0, 0.0/1.0], [3.0/4.0, 0.0/1.0], [-3.0/4.0, 1.0/1.0]]]])

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 4 and the vertices are coplanar
		then it's a Quadrilateral.
		"""
		if len(element.vertices) == 4 and areCoplanar(*[v.getCoordinates() for v in element.vertices]):
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		vertex1 = elementVertices[Quadrilateral.innerFaceNeighborVertices[local][0]]
		vertex2 = elementVertices[Quadrilateral.innerFaceNeighborVertices[local][1]]
		areaVectorCoords = ( elementCentroid - (vertex1 + vertex2)/2.0 ).getCoordinates()
		return Point(areaVectorCoords[1], -areaVectorCoords[0], 0.0)

class Tetrahedron(Shape):
	dimension						   = 3
	numberOfInnerFaces				   = 6
	numberOfFacets 					   = 4
	subelementTransformedVolumes	   = np.array([1.0/24.0, 1.0/24.0, 1.0/24.0, 1.0/24.0])
	innerFaceShapeFunctionValues	   = np.array([[17.0/48.0, 17.0/48.0, 7.0/48.0, 7.0/48.0], [7.0/48.0, 17.0/48.0, 17.0/48.0, 7.0/48.0], [17.0/48.0, 7.0/48.0, 17.0/48.0, 7.0/48.0], [17.0/48.0, 7.0/48.0, 7.0/48.0, 17.0/48.0], [7.0/48.0, 7.0/48.0, 17.0/48.0, 17.0/48.0], [7.0/48.0, 17.0/48.0, 7.0/48.0, 17.0/48.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1, 3, 2], [1, 2, 3, 0], [2, 0, 3, 1], [0, 3, 2, 1], [1, 3, 0, 2], [2, 3, 1, 0]])
	subelementShapeFunctionValues	   = np.array([[15.0/32.0, 17.0/96.0, 17.0/96.0, 17.0/96.0], [17.0/96.0, 15.0/32.0, 17.0/96.0, 17.0/96.0], [17.0/96.0, 17.0/96.0, 15.0/32.0, 17.0/96.0], [17.0/96.0, 17.0/96.0, 17.0/96.0, 15.0/32.0]])
	subelementShapeFunctionDerivatives = np.array([[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]])
	facetVerticesIndexes 			   = np.array([[0, 2, 1], [0, 3, 2], [0, 1, 3], [1, 2, 3]])
	outerFaceShapeFunctionValues	   = np.array([[[7.0/12.0, 5.0/24.0, 5.0/24.0, 0.0/1.0], [5.0/24.0, 5.0/24.0, 7.0/12.0, 0.0/1.0], [5.0/24.0, 7.0/12.0, 5.0/24.0, 0.0/1.0]], [[7.0/12.0, 0.0/1.0, 5.0/24.0, 5.0/24.0], [5.0/24.0, 0.0/1.0, 5.0/24.0, 7.0/12.0], [5.0/24.0, 0.0/1.0, 7.0/12.0, 5.0/24.0]], [[7.0/12.0, 5.0/24.0, 0.0/1.0, 5.0/24.0], [5.0/24.0, 7.0/12.0, 0.0/1.0, 5.0/24.0], [5.0/24.0, 5.0/24.0, 0.0/1.0, 7.0/12.0]], [[0.0/1.0, 7.0/12.0, 5.0/24.0, 5.0/24.0], [0.0/1.0, 5.0/24.0, 7.0/12.0, 5.0/24.0], [0.0/1.0, 5.0/24.0, 5.0/24.0, 7.0/12.0]]])
	outerFaceShapeFunctionDerivatives  = np.array([[[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/1.0, -1.0/1.0, -1.0/1.0], [1.0/1.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/1.0, 0.0/1.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]]])

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 4 and the vertices aren't coplanar
		then it's a Tetrahedron.
		"""
		if len(element.vertices) == 4 and not areCoplanar(*[v.getCoordinates() for v in element.vertices]):
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		b = Tetrahedron.innerFaceNeighborVertices[local][0]
		f = Tetrahedron.innerFaceNeighborVertices[local][1]
		q = Tetrahedron.innerFaceNeighborVertices[local][2]
		w = Tetrahedron.innerFaceNeighborVertices[local][3]
		
		p0 = ( elementCentroid 														).getCoordinates()
		p1 = ( (elementVertices[b] + elementVertices[f] + elementVertices[q]) / 3.0 ).getCoordinates()
		p2 = ( (elementVertices[b] + elementVertices[f]) / 2.0 						).getCoordinates()
		p3 = ( (elementVertices[b] + elementVertices[f] + elementVertices[w]) / 3.0 ).getCoordinates()
		p  = ( np.cross((p1-p0),(p3-p0)) + np.cross((p3-p2),(p1-p2)) ) / 2.0
		
		return Point(*p)

class Hexahedron(Shape):
	dimension						   = 3
	numberOfInnerFaces				   = 12
	numberOfFacets 					   = 6
	subelementTransformedVolumes	   = np.array([1.0/8.0, 1.0/8.0, 1.0/8.0, 1.0/8.0, 1.0/8.0, 1.0/8.0, 1.0/8.0, 1.0/8.0])
	innerFaceShapeFunctionValues	   = np.array([[9.0/32.0, 9.0/32.0, 3.0/32.0, 3.0/32.0, 3.0/32.0, 3.0/32.0, 1.0/32.0, 1.0/32.0], [3.0/32.0, 9.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 3.0/32.0, 1.0/32.0], [3.0/32.0, 3.0/32.0, 9.0/32.0, 9.0/32.0, 1.0/32.0, 1.0/32.0, 3.0/32.0, 3.0/32.0], [9.0/32.0, 3.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 1.0/32.0, 3.0/32.0], [3.0/32.0, 3.0/32.0, 1.0/32.0, 1.0/32.0, 9.0/32.0, 9.0/32.0, 3.0/32.0, 3.0/32.0], [1.0/32.0, 3.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 9.0/32.0, 3.0/32.0], [1.0/32.0, 1.0/32.0, 3.0/32.0, 3.0/32.0, 3.0/32.0, 3.0/32.0, 9.0/32.0, 9.0/32.0], [3.0/32.0, 1.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 3.0/32.0, 9.0/32.0], [9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0], [3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0], [1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0], [3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0, 3.0/32.0, 1.0/32.0, 3.0/32.0, 9.0/32.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-9.0/16.0, -3.0/8.0, -3.0/8.0], [9.0/16.0, -3.0/8.0, -3.0/8.0], [3.0/16.0, 3.0/8.0, -1.0/8.0], [-3.0/16.0, 3.0/8.0, -1.0/8.0], [-3.0/16.0, -1.0/8.0, 3.0/8.0], [3.0/16.0, -1.0/8.0, 3.0/8.0], [1.0/16.0, 1.0/8.0, 1.0/8.0], [-1.0/16.0, 1.0/8.0, 1.0/8.0]], [[-3.0/8.0, -3.0/16.0, -1.0/8.0], [3.0/8.0, -9.0/16.0, -3.0/8.0], [3.0/8.0, 9.0/16.0, -3.0/8.0], [-3.0/8.0, 3.0/16.0, -1.0/8.0], [-1.0/8.0, -1.0/16.0, 1.0/8.0], [1.0/8.0, -3.0/16.0, 3.0/8.0], [1.0/8.0, 3.0/16.0, 3.0/8.0], [-1.0/8.0, 1.0/16.0, 1.0/8.0]], [[-3.0/16.0, -3.0/8.0, -1.0/8.0], [3.0/16.0, -3.0/8.0, -1.0/8.0], [9.0/16.0, 3.0/8.0, -3.0/8.0], [-9.0/16.0, 3.0/8.0, -3.0/8.0], [-1.0/16.0, -1.0/8.0, 1.0/8.0], [1.0/16.0, -1.0/8.0, 1.0/8.0], [3.0/16.0, 1.0/8.0, 3.0/8.0], [-3.0/16.0, 1.0/8.0, 3.0/8.0]], [[-3.0/8.0, -9.0/16.0, -3.0/8.0], [3.0/8.0, -3.0/16.0, -1.0/8.0], [3.0/8.0, 3.0/16.0, -1.0/8.0], [-3.0/8.0, 9.0/16.0, -3.0/8.0], [-1.0/8.0, -3.0/16.0, 3.0/8.0], [1.0/8.0, -1.0/16.0, 1.0/8.0], [1.0/8.0, 1.0/16.0, 1.0/8.0], [-1.0/8.0, 3.0/16.0, 3.0/8.0]], [[-3.0/16.0, -1.0/8.0, -3.0/8.0], [3.0/16.0, -1.0/8.0, -3.0/8.0], [1.0/16.0, 1.0/8.0, -1.0/8.0], [-1.0/16.0, 1.0/8.0, -1.0/8.0], [-9.0/16.0, -3.0/8.0, 3.0/8.0], [9.0/16.0, -3.0/8.0, 3.0/8.0], [3.0/16.0, 3.0/8.0, 1.0/8.0], [-3.0/16.0, 3.0/8.0, 1.0/8.0]], [[-1.0/8.0, -1.0/16.0, -1.0/8.0], [1.0/8.0, -3.0/16.0, -3.0/8.0], [1.0/8.0, 3.0/16.0, -3.0/8.0], [-1.0/8.0, 1.0/16.0, -1.0/8.0], [-3.0/8.0, -3.0/16.0, 1.0/8.0], [3.0/8.0, -9.0/16.0, 3.0/8.0], [3.0/8.0, 9.0/16.0, 3.0/8.0], [-3.0/8.0, 3.0/16.0, 1.0/8.0]], [[-1.0/16.0, -1.0/8.0, -1.0/8.0], [1.0/16.0, -1.0/8.0, -1.0/8.0], [3.0/16.0, 1.0/8.0, -3.0/8.0], [-3.0/16.0, 1.0/8.0, -3.0/8.0], [-3.0/16.0, -3.0/8.0, 1.0/8.0], [3.0/16.0, -3.0/8.0, 1.0/8.0], [9.0/16.0, 3.0/8.0, 3.0/8.0], [-9.0/16.0, 3.0/8.0, 3.0/8.0]], [[-1.0/8.0, -3.0/16.0, -3.0/8.0], [1.0/8.0, -1.0/16.0, -1.0/8.0], [1.0/8.0, 1.0/16.0, -1.0/8.0], [-1.0/8.0, 3.0/16.0, -3.0/8.0], [-3.0/8.0, -9.0/16.0, 3.0/8.0], [3.0/8.0, -3.0/16.0, 1.0/8.0], [3.0/8.0, 3.0/16.0, 1.0/8.0], [-3.0/8.0, 9.0/16.0, 3.0/8.0]], [[-3.0/8.0, -3.0/8.0, -9.0/16.0], [3.0/8.0, -1.0/8.0, -3.0/16.0], [1.0/8.0, 1.0/8.0, -1.0/16.0], [-1.0/8.0, 3.0/8.0, -3.0/16.0], [-3.0/8.0, -3.0/8.0, 9.0/16.0], [3.0/8.0, -1.0/8.0, 3.0/16.0], [1.0/8.0, 1.0/8.0, 1.0/16.0], [-1.0/8.0, 3.0/8.0, 3.0/16.0]], [[-3.0/8.0, -1.0/8.0, -3.0/16.0], [3.0/8.0, -3.0/8.0, -9.0/16.0], [1.0/8.0, 3.0/8.0, -3.0/16.0], [-1.0/8.0, 1.0/8.0, -1.0/16.0], [-3.0/8.0, -1.0/8.0, 3.0/16.0], [3.0/8.0, -3.0/8.0, 9.0/16.0], [1.0/8.0, 3.0/8.0, 3.0/16.0], [-1.0/8.0, 1.0/8.0, 1.0/16.0]], [[-1.0/8.0, -1.0/8.0, -1.0/16.0], [1.0/8.0, -3.0/8.0, -3.0/16.0], [3.0/8.0, 3.0/8.0, -9.0/16.0], [-3.0/8.0, 1.0/8.0, -3.0/16.0], [-1.0/8.0, -1.0/8.0, 1.0/16.0], [1.0/8.0, -3.0/8.0, 3.0/16.0], [3.0/8.0, 3.0/8.0, 9.0/16.0], [-3.0/8.0, 1.0/8.0, 3.0/16.0]], [[-1.0/8.0, -3.0/8.0, -3.0/16.0], [1.0/8.0, -1.0/8.0, -1.0/16.0], [3.0/8.0, 1.0/8.0, -3.0/16.0], [-3.0/8.0, 3.0/8.0, -9.0/16.0], [-1.0/8.0, -3.0/8.0, 3.0/16.0], [1.0/8.0, -1.0/8.0, 1.0/16.0], [3.0/8.0, 1.0/8.0, 3.0/16.0], [-3.0/8.0, 3.0/8.0, 9.0/16.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1, 4, 5, 2, 3], [1, 2, 5, 6, 3, 0], [2, 3, 6, 7, 0, 1], [3, 0, 7, 4, 1, 2], [4, 5, 6, 7, 0, 1], [5, 6, 7, 4, 1, 2], [6, 7, 4, 5, 2, 3], [7, 4, 5, 6, 3, 0], [4, 0, 1, 5, 3, 7], [5, 1, 2, 6, 4, 0], [6, 2, 3, 7, 5, 1], [7, 3, 4, 0, 6, 2]])
	subelementShapeFunctionValues	   = np.array([[27.0/64.0, 9.0/64.0, 3.0/64.0, 9.0/64.0, 9.0/64.0, 3.0/64.0, 1.0/64.0, 3.0/64.0], [9.0/64.0, 27.0/64.0, 9.0/64.0, 3.0/64.0, 3.0/64.0, 9.0/64.0, 3.0/64.0, 1.0/64.0], [3.0/64.0, 9.0/64.0, 27.0/64.0, 9.0/64.0, 1.0/64.0, 3.0/64.0, 9.0/64.0, 3.0/64.0], [9.0/64.0, 3.0/64.0, 9.0/64.0, 27.0/64.0, 3.0/64.0, 1.0/64.0, 3.0/64.0, 9.0/64.0], [9.0/64.0, 3.0/64.0, 1.0/64.0, 3.0/64.0, 27.0/64.0, 9.0/64.0, 3.0/64.0, 9.0/64.0], [3.0/64.0, 9.0/64.0, 3.0/64.0, 1.0/64.0, 9.0/64.0, 27.0/64.0, 9.0/64.0, 3.0/64.0], [1.0/64.0, 3.0/64.0, 9.0/64.0, 3.0/64.0, 3.0/64.0, 9.0/64.0, 27.0/64.0, 9.0/64.0], [3.0/64.0, 1.0/64.0, 3.0/64.0, 9.0/64.0, 9.0/64.0, 3.0/64.0, 9.0/64.0, 27.0/64.0]])
	subelementShapeFunctionDerivatives = np.array([[[-9.0/16.0, -9.0/16.0, -9.0/16.0], [9.0/16.0, -3.0/16.0, -3.0/16.0], [3.0/16.0, 3.0/16.0, -1.0/16.0], [-3.0/16.0, 9.0/16.0, -3.0/16.0], [-3.0/16.0, -3.0/16.0, 9.0/16.0], [3.0/16.0, -1.0/16.0, 3.0/16.0], [1.0/16.0, 1.0/16.0, 1.0/16.0], [-1.0/16.0, 3.0/16.0, 3.0/16.0]], [[-9.0/16.0, -3.0/16.0, -3.0/16.0], [9.0/16.0, -9.0/16.0, -9.0/16.0], [3.0/16.0, 9.0/16.0, -3.0/16.0], [-3.0/16.0, 3.0/16.0, -1.0/16.0], [-3.0/16.0, -1.0/16.0, 3.0/16.0], [3.0/16.0, -3.0/16.0, 9.0/16.0], [1.0/16.0, 3.0/16.0, 3.0/16.0], [-1.0/16.0, 1.0/16.0, 1.0/16.0]], [[-3.0/16.0, -3.0/16.0, -1.0/16.0], [3.0/16.0, -9.0/16.0, -3.0/16.0], [9.0/16.0, 9.0/16.0, -9.0/16.0], [-9.0/16.0, 3.0/16.0, -3.0/16.0], [-1.0/16.0, -1.0/16.0, 1.0/16.0], [1.0/16.0, -3.0/16.0, 3.0/16.0], [3.0/16.0, 3.0/16.0, 9.0/16.0], [-3.0/16.0, 1.0/16.0, 3.0/16.0]], [[-3.0/16.0, -9.0/16.0, -3.0/16.0], [3.0/16.0, -3.0/16.0, -1.0/16.0], [9.0/16.0, 3.0/16.0, -3.0/16.0], [-9.0/16.0, 9.0/16.0, -9.0/16.0], [-1.0/16.0, -3.0/16.0, 3.0/16.0], [1.0/16.0, -1.0/16.0, 1.0/16.0], [3.0/16.0, 1.0/16.0, 3.0/16.0], [-3.0/16.0, 3.0/16.0, 9.0/16.0]], [[-3.0/16.0, -3.0/16.0, -9.0/16.0], [3.0/16.0, -1.0/16.0, -3.0/16.0], [1.0/16.0, 1.0/16.0, -1.0/16.0], [-1.0/16.0, 3.0/16.0, -3.0/16.0], [-9.0/16.0, -9.0/16.0, 9.0/16.0], [9.0/16.0, -3.0/16.0, 3.0/16.0], [3.0/16.0, 3.0/16.0, 1.0/16.0], [-3.0/16.0, 9.0/16.0, 3.0/16.0]], [[-3.0/16.0, -1.0/16.0, -3.0/16.0], [3.0/16.0, -3.0/16.0, -9.0/16.0], [1.0/16.0, 3.0/16.0, -3.0/16.0], [-1.0/16.0, 1.0/16.0, -1.0/16.0], [-9.0/16.0, -3.0/16.0, 3.0/16.0], [9.0/16.0, -9.0/16.0, 9.0/16.0], [3.0/16.0, 9.0/16.0, 3.0/16.0], [-3.0/16.0, 3.0/16.0, 1.0/16.0]], [[-1.0/16.0, -1.0/16.0, -1.0/16.0], [1.0/16.0, -3.0/16.0, -3.0/16.0], [3.0/16.0, 3.0/16.0, -9.0/16.0], [-3.0/16.0, 1.0/16.0, -3.0/16.0], [-3.0/16.0, -3.0/16.0, 1.0/16.0], [3.0/16.0, -9.0/16.0, 3.0/16.0], [9.0/16.0, 9.0/16.0, 9.0/16.0], [-9.0/16.0, 3.0/16.0, 3.0/16.0]], [[-1.0/16.0, -3.0/16.0, -3.0/16.0], [1.0/16.0, -1.0/16.0, -1.0/16.0], [3.0/16.0, 1.0/16.0, -3.0/16.0], [-3.0/16.0, 3.0/16.0, -9.0/16.0], [-3.0/16.0, -9.0/16.0, 3.0/16.0], [3.0/16.0, -3.0/16.0, 1.0/16.0], [9.0/16.0, 3.0/16.0, 3.0/16.0], [-9.0/16.0, 9.0/16.0, 9.0/16.0]]])
	facetVerticesIndexes 			   = np.array([[0, 3, 2, 1], [0, 4, 7, 3], [0, 1, 5, 4], [4, 5, 6, 7], [1, 2, 6, 5], [2, 3, 7, 6]])
	outerFaceShapeFunctionValues	   = np.array([[[9.0/16.0, 3.0/16.0, 1.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 1.0/16.0, 3.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, 3.0/16.0, 9.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 9.0/16.0, 3.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0]], [[9.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 1.0/16.0], [3.0/16.0, 0.0/1.0, 0.0/1.0, 1.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0], [1.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 9.0/16.0], [3.0/16.0, 0.0/1.0, 0.0/1.0, 9.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0]], [[9.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0]], [[0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 9.0/16.0, 3.0/16.0, 1.0/16.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 9.0/16.0, 3.0/16.0, 1.0/16.0], [0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 1.0/16.0, 3.0/16.0, 9.0/16.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 1.0/16.0, 3.0/16.0, 9.0/16.0]], [[0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0], [0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0]], [[0.0/1.0, 0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 1.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0, 0.0/1.0, 1.0/16.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0, 0.0/1.0, 3.0/16.0, 9.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0, 0.0/1.0, 9.0/16.0, 3.0/16.0]]])
	outerFaceShapeFunctionDerivatives  = np.array([[[[-3.0/4.0, -3.0/4.0, -9.0/16.0], [3.0/4.0, -1.0/4.0, -3.0/16.0], [1.0/4.0, 1.0/4.0, -1.0/16.0], [-1.0/4.0, 3.0/4.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, 9.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0]],[[-1.0/4.0, -3.0/4.0, -3.0/16.0], [1.0/4.0, -1.0/4.0, -1.0/16.0], [3.0/4.0, 1.0/4.0, -3.0/16.0], [-3.0/4.0, 3.0/4.0, -9.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 9.0/16.0]],[[-1.0/4.0, -1.0/4.0, -1.0/16.0], [1.0/4.0, -3.0/4.0, -3.0/16.0], [3.0/4.0, 3.0/4.0, -9.0/16.0], [-3.0/4.0, 1.0/4.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 9.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0]],    [[-3.0/4.0, -1.0/4.0, -3.0/16.0], [3.0/4.0, -3.0/4.0, -9.0/16.0], [1.0/4.0, 3.0/4.0, -3.0/16.0], [-1.0/4.0, 1.0/4.0, -1.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 9.0/16.0], [0.0/1.0, 0.0/1.0, 3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/16.0]]],[[[-9.0/16.0, -3.0/4.0, -3.0/4.0], [9.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 3.0/4.0, -1.0/4.0], [-3.0/16.0, -1.0/4.0, 3.0/4.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, 0.0/1.0, 0.0/1.0], [-1.0/16.0, 1.0/4.0, 1.0/4.0]],[[-3.0/16.0, -1.0/4.0, -3.0/4.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, 0.0/1.0, 0.0/1.0], [-1.0/16.0, 1.0/4.0, -1.0/4.0], [-9.0/16.0, -3.0/4.0, 3.0/4.0], [9.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 3.0/4.0, 1.0/4.0]],[[-1.0/16.0, -1.0/4.0, -1.0/4.0], [1.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 1.0/4.0, -3.0/4.0], [-3.0/16.0, -3.0/4.0, 1.0/4.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [9.0/16.0, 0.0/1.0, 0.0/1.0], [-9.0/16.0, 3.0/4.0, 3.0/4.0]],    [[-3.0/16.0, -3.0/4.0, -1.0/4.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [9.0/16.0, 0.0/1.0, 0.0/1.0], [-9.0/16.0, 3.0/4.0, -3.0/4.0], [-1.0/16.0, -1.0/4.0, 1.0/4.0], [1.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 1.0/4.0, 3.0/4.0]]],[[[-3.0/4.0, -9.0/16.0, -3.0/4.0], [3.0/4.0, -3.0/16.0, -1.0/4.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [0.0/1.0, 9.0/16.0, 0.0/1.0], [-1.0/4.0, -3.0/16.0, 3.0/4.0], [1.0/4.0, -1.0/16.0, 1.0/4.0], [0.0/1.0, 1.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 0.0/1.0]],[[-3.0/4.0, -3.0/16.0, -1.0/4.0], [3.0/4.0, -9.0/16.0, -3.0/4.0], [0.0/1.0, 9.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [-1.0/4.0, -1.0/16.0, 1.0/4.0], [1.0/4.0, -3.0/16.0, 3.0/4.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [0.0/1.0, 1.0/16.0, 0.0/1.0]],[[-1.0/4.0, -1.0/16.0, -1.0/4.0], [1.0/4.0, -3.0/16.0, -3.0/4.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [0.0/1.0, 1.0/16.0, 0.0/1.0], [-3.0/4.0, -3.0/16.0, 1.0/4.0], [3.0/4.0, -9.0/16.0, 3.0/4.0], [0.0/1.0, 9.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 0.0/1.0]],    [[-1.0/4.0, -3.0/16.0, -3.0/4.0], [1.0/4.0, -1.0/16.0, -1.0/4.0], [0.0/1.0, 1.0/16.0, 0.0/1.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [-3.0/4.0, -9.0/16.0, 3.0/4.0], [3.0/4.0, -3.0/16.0, 1.0/4.0], [0.0/1.0, 3.0/16.0, 0.0/1.0], [0.0/1.0, 9.0/16.0, 0.0/1.0]]],[[[0.0/1.0, 0.0/1.0, -9.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -1.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [-3.0/4.0, -3.0/4.0, 9.0/16.0], [3.0/4.0, -1.0/4.0, 3.0/16.0], [1.0/4.0, 1.0/4.0, 1.0/16.0], [-1.0/4.0, 3.0/4.0, 3.0/16.0]],[[0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -9.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -1.0/16.0], [-3.0/4.0, -1.0/4.0, 3.0/16.0], [3.0/4.0, -3.0/4.0, 9.0/16.0], [1.0/4.0, 3.0/4.0, 3.0/16.0], [-1.0/4.0, 1.0/4.0, 1.0/16.0]],[[0.0/1.0, 0.0/1.0, -1.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -9.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [-1.0/4.0, -1.0/4.0, 1.0/16.0], [1.0/4.0, -3.0/4.0, 3.0/16.0], [3.0/4.0, 3.0/4.0, 9.0/16.0], [-3.0/4.0, 1.0/4.0, 3.0/16.0]],    [[0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -1.0/16.0], [0.0/1.0, 0.0/1.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, -9.0/16.0], [-1.0/4.0, -3.0/4.0, 3.0/16.0], [1.0/4.0, -1.0/4.0, 1.0/16.0], [3.0/4.0, 1.0/4.0, 3.0/16.0], [-3.0/4.0, 3.0/4.0, 9.0/16.0]]],[[[-9.0/16.0, 0.0/1.0, 0.0/1.0], [9.0/16.0, -3.0/4.0, -3.0/4.0], [3.0/16.0, 3.0/4.0, -1.0/4.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, -1.0/4.0, 3.0/4.0], [1.0/16.0, 1.0/4.0, 1.0/4.0], [-1.0/16.0, 0.0/1.0, 0.0/1.0]],[[-3.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, -3.0/4.0, -1.0/4.0], [9.0/16.0, 3.0/4.0, -3.0/4.0], [-9.0/16.0, 0.0/1.0, 0.0/1.0], [-1.0/16.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, -1.0/4.0, 1.0/4.0], [3.0/16.0, 1.0/4.0, 3.0/4.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0]],[[-1.0/16.0, 0.0/1.0, 0.0/1.0], [1.0/16.0, -1.0/4.0, -1.0/4.0], [3.0/16.0, 1.0/4.0, -3.0/4.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, -3.0/4.0, 1.0/4.0], [9.0/16.0, 3.0/4.0, 3.0/4.0], [-9.0/16.0, 0.0/1.0, 0.0/1.0]],    [[-3.0/16.0, 0.0/1.0, 0.0/1.0], [3.0/16.0, -1.0/4.0, -3.0/4.0], [1.0/16.0, 1.0/4.0, -1.0/4.0], [-1.0/16.0, 0.0/1.0, 0.0/1.0], [-9.0/16.0, 0.0/1.0, 0.0/1.0], [9.0/16.0, -3.0/4.0, 3.0/4.0], [3.0/16.0, 3.0/4.0, 1.0/4.0], [-3.0/16.0, 0.0/1.0, 0.0/1.0]]],[[[0.0/1.0, -3.0/16.0, 0.0/1.0], [0.0/1.0, -9.0/16.0, 0.0/1.0], [3.0/4.0, 9.0/16.0, -3.0/4.0], [-3.0/4.0, 3.0/16.0, -1.0/4.0], [0.0/1.0, -1.0/16.0, 0.0/1.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [1.0/4.0, 3.0/16.0, 3.0/4.0], [-1.0/4.0, 1.0/16.0, 1.0/4.0]],[[0.0/1.0, -9.0/16.0, 0.0/1.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [3.0/4.0, 3.0/16.0, -1.0/4.0], [-3.0/4.0, 9.0/16.0, -3.0/4.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [0.0/1.0, -1.0/16.0, 0.0/1.0], [1.0/4.0, 1.0/16.0, 1.0/4.0], [-1.0/4.0, 3.0/16.0, 3.0/4.0]],[[0.0/1.0, -3.0/16.0, 0.0/1.0], [0.0/1.0, -1.0/16.0, 0.0/1.0], [1.0/4.0, 1.0/16.0, -1.0/4.0], [-1.0/4.0, 3.0/16.0, -3.0/4.0], [0.0/1.0, -9.0/16.0, 0.0/1.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [3.0/4.0, 3.0/16.0, 1.0/4.0], [-3.0/4.0, 9.0/16.0, 3.0/4.0]],    [[0.0/1.0, -1.0/16.0, 0.0/1.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [1.0/4.0, 3.0/16.0, -3.0/4.0], [-1.0/4.0, 1.0/16.0, -1.0/4.0], [0.0/1.0, -3.0/16.0, 0.0/1.0], [0.0/1.0, -9.0/16.0, 0.0/1.0], [3.0/4.0, 9.0/16.0, 3.0/4.0], [-3.0/4.0, 3.0/16.0, 1.0/4.0]]]])

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 8 then it's an Hexahedron.
		"""
		if len(element.vertices) == 8:
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		b = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[0] ]
		f = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[1] ]
		q = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[2] ]
		w = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[3] ]
		e = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[4] ]
		r = elementVertices[ (Hexahedron.innerFaceNeighborVertices[local])[5] ]

		# Element centroid
		x0, y0, z0 = elementCentroid.getCoordinates()
		# Facet [f-b-q-w] centroid
		x1, y1, z1 = ( (b + f + q + w) / 4.0 ).getCoordinates()
		# Edge [f-b] midpoint
		x2, y2, z2 = ( (b + f) / 2.0 ).getCoordinates()
		# Facet [f-b-e-r] centroid
		x3, y3, z3 = ( (b + f + e + r) / 4.0 ).getCoordinates()
		# Face area vector components
		x = 0.5 * ((y1-y0)*(z3-z0) - (y3-y0)*(z1-z0) + (y3-y2)*(z1-z2) - (y1-y2)*(z3-z2))
		y = 0.5 * ((x3-x0)*(z1-z0) - (x1-x0)*(z3-z0) + (x1-x2)*(z3-z2) - (x3-x2)*(z1-z2))
		z = 0.5 * ((x1-x0)*(y3-y0) - (x3-x0)*(y1-y0) + (x3-x2)*(y1-y2) - (x1-x2)*(y3-y2))
		return Point(x, y, z)

class Prism(Shape):
	dimension						   = 3
	numberOfInnerFaces				   = 9
	numberOfFacets 					   = 5
	subelementTransformedVolumes	   = np.array([1.0/12.0, 1.0/12.0, 1.0/12.0, 1.0/12.0, 1.0/12.0, 1.0/12.0])
	innerFaceShapeFunctionValues	   = np.array([[5.0/16.0, 5.0/16.0, 1.0/8.0, 5.0/48.0, 5.0/48.0, 1.0/24.0], [1.0/8.0, 5.0/16.0, 5.0/16.0, 1.0/24.0, 5.0/48.0, 5.0/48.0], [5.0/16.0, 1.0/8.0, 5.0/16.0, 5.0/48.0, 1.0/24.0, 5.0/48.0], [5.0/48.0, 5.0/48.0, 1.0/24.0, 5.0/16.0, 5.0/16.0, 1.0/8.0], [1.0/24.0, 5.0/48.0, 5.0/48.0, 1.0/8.0, 5.0/16.0, 5.0/16.0], [5.0/48.0, 1.0/24.0, 5.0/48.0, 5.0/16.0, 1.0/8.0, 5.0/16.0], [7.0/24.0, 5.0/48.0, 5.0/48.0, 7.0/24.0, 5.0/48.0, 5.0/48.0], [5.0/48.0, 7.0/24.0, 5.0/48.0, 5.0/48.0, 7.0/24.0, 5.0/48.0], [5.0/48.0, 5.0/48.0, 7.0/24.0, 5.0/48.0, 5.0/48.0, 7.0/24.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-3.0/4.0, -3.0/4.0, -5.0/12.0], [3.0/4.0, 0.0/1.0, -5.0/12.0], [0.0/1.0, 3.0/4.0, -1.0/6.0], [-1.0/4.0, -1.0/4.0, 5.0/12.0], [1.0/4.0, 0.0/1.0, 5.0/12.0], [0.0/1.0, 1.0/4.0, 1.0/6.0]], [[-3.0/4.0, -3.0/4.0, -1.0/6.0], [3.0/4.0, 0.0/1.0, -5.0/12.0], [0.0/1.0, 3.0/4.0, -5.0/12.0], [-1.0/4.0, -1.0/4.0, 1.0/6.0], [1.0/4.0, 0.0/1.0, 5.0/12.0], [0.0/1.0, 1.0/4.0, 5.0/12.0]], [[-3.0/4.0, -3.0/4.0, -5.0/12.0], [3.0/4.0, 0.0/1.0, -1.0/6.0], [0.0/1.0, 3.0/4.0, -5.0/12.0], [-1.0/4.0, -1.0/4.0, 5.0/12.0], [1.0/4.0, 0.0/1.0, 1.0/6.0], [0.0/1.0, 1.0/4.0, 5.0/12.0]], [[-1.0/4.0, -1.0/4.0, -5.0/12.0], [1.0/4.0, 0.0/1.0, -5.0/12.0], [0.0/1.0, 1.0/4.0, -1.0/6.0], [-3.0/4.0, -3.0/4.0, 5.0/12.0], [3.0/4.0, 0.0/1.0, 5.0/12.0], [0.0/1.0, 3.0/4.0, 1.0/6.0]], [[-1.0/4.0, -1.0/4.0, -1.0/6.0], [1.0/4.0, 0.0/1.0, -5.0/12.0], [0.0/1.0, 1.0/4.0, -5.0/12.0], [-3.0/4.0, -3.0/4.0, 1.0/6.0], [3.0/4.0, 0.0/1.0, 5.0/12.0], [0.0/1.0, 3.0/4.0, 5.0/12.0]], [[-1.0/4.0, -1.0/4.0, -5.0/12.0], [1.0/4.0, 0.0/1.0, -1.0/6.0], [0.0/1.0, 1.0/4.0, -5.0/12.0], [-3.0/4.0, -3.0/4.0, 5.0/12.0], [3.0/4.0, 0.0/1.0, 1.0/6.0], [0.0/1.0, 3.0/4.0, 5.0/12.0]], [[-1.0/2.0, -1.0/2.0, -7.0/12.0], [1.0/2.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/2.0, -5.0/24.0], [-1.0/2.0, -1.0/2.0, 7.0/12.0], [1.0/2.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/2.0, 5.0/24.0]], [[-1.0/2.0, -1.0/2.0, -5.0/24.0], [1.0/2.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 1.0/2.0, -5.0/24.0], [-1.0/2.0, -1.0/2.0, 5.0/24.0], [1.0/2.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 1.0/2.0, 5.0/24.0]], [[-1.0/2.0, -1.0/2.0, -5.0/24.0], [1.0/2.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/2.0, -7.0/12.0], [-1.0/2.0, -1.0/2.0, 5.0/24.0], [1.0/2.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/2.0, 7.0/12.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1, 3, 4, 2, 0], [1, 2, 4, 5, 0, 0], [2, 0, 5, 3, 1, 0], [4, 3, 0, 1, 5, 0], [5, 4, 1, 2, 3, 0], [3, 5, 2, 0, 4, 0], [3, 0, 1, 4, 2, 5], [4, 1, 2, 5, 3, 0], [5, 2, 3, 0, 4, 1]])
	subelementShapeFunctionValues	   = np.array([[7.0/16.0, 5.0/32.0, 5.0/32.0, 7.0/48.0, 5.0/96.0, 5.0/96.0], [5.0/32.0, 7.0/16.0, 5.0/32.0, 5.0/96.0, 7.0/48.0, 5.0/96.0], [5.0/32.0, 5.0/32.0, 7.0/16.0, 5.0/96.0, 5.0/96.0, 7.0/48.0], [7.0/48.0, 5.0/96.0, 5.0/96.0, 7.0/16.0, 5.0/32.0, 5.0/32.0], [5.0/96.0, 7.0/48.0, 5.0/96.0, 5.0/32.0, 7.0/16.0, 5.0/32.0], [5.0/96.0, 5.0/96.0, 7.0/48.0, 5.0/32.0, 5.0/32.0, 7.0/16.0]])
	subelementShapeFunctionDerivatives = np.array([[[-3.0/4.0, -3.0/4.0, -7.0/12.0], [3.0/4.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 3.0/4.0, -5.0/24.0], [-1.0/4.0, -1.0/4.0, 7.0/12.0], [1.0/4.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/4.0, 5.0/24.0]], [[-3.0/4.0, -3.0/4.0, -5.0/24.0], [3.0/4.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 3.0/4.0, -5.0/24.0], [-1.0/4.0, -1.0/4.0, 5.0/24.0], [1.0/4.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 1.0/4.0, 5.0/24.0]], [[-3.0/4.0, -3.0/4.0, -5.0/24.0], [3.0/4.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 3.0/4.0, -7.0/12.0], [-1.0/4.0, -1.0/4.0, 5.0/24.0], [1.0/4.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/4.0, 7.0/12.0]], [[-1.0/4.0, -1.0/4.0, -7.0/12.0], [1.0/4.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/4.0, -5.0/24.0], [-3.0/4.0, -3.0/4.0, 7.0/12.0], [3.0/4.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 3.0/4.0, 5.0/24.0]], [[-1.0/4.0, -1.0/4.0, -5.0/24.0], [1.0/4.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 1.0/4.0, -5.0/24.0], [-3.0/4.0, -3.0/4.0, 5.0/24.0], [3.0/4.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 3.0/4.0, 5.0/24.0]], [[-1.0/4.0, -1.0/4.0, -5.0/24.0], [1.0/4.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/4.0, -7.0/12.0], [-3.0/4.0, -3.0/4.0, 5.0/24.0], [3.0/4.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 3.0/4.0, 7.0/12.0]]])
	facetVerticesIndexes 			   = np.array([[0, 2, 1], [3, 4, 5], [0, 3, 5, 2], [0, 1, 4, 3], [1, 2, 5, 4]], dtype=np.object)
	outerFaceShapeFunctionValues	   = np.array([[[7.0/12.0, 5.0/24.0, 5.0/24.0, 0.0/1.0, 0.0/1.0, 0.0/1.0], [5.0/24.0, 5.0/24.0, 7.0/12.0, 0.0/1.0, 0.0/1.0, 0.0/1.0], [5.0/24.0, 7.0/12.0, 5.0/24.0, 0.0/1.0, 0.0/1.0, 0.0/1.0]], [[0.0/1.0, 0.0/1.0, 0.0/1.0, 7.0/12.0, 5.0/24.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 0.0/1.0, 5.0/24.0, 7.0/12.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 0.0/1.0, 5.0/24.0, 5.0/24.0, 7.0/12.0]], [[9.0/16.0, 0.0/1.0, 3.0/16.0, 3.0/16.0, 0.0/1.0, 1.0/16.0], [3.0/16.0, 0.0/1.0, 1.0/16.0, 9.0/16.0, 0.0/1.0, 3.0/16.0], [1.0/16.0, 0.0/1.0, 3.0/16.0, 3.0/16.0, 0.0/1.0, 9.0/16.0], [3.0/16.0, 0.0/1.0, 9.0/16.0, 1.0/16.0, 0.0/1.0, 3.0/16.0]], [[9.0/16.0, 3.0/16.0, 0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0], [3.0/16.0, 9.0/16.0, 0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0], [1.0/16.0, 3.0/16.0, 0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0], [3.0/16.0, 1.0/16.0, 0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0]], [[0.0/1.0, 9.0/16.0, 3.0/16.0, 0.0/1.0, 3.0/16.0, 1.0/16.0], [0.0/1.0, 3.0/16.0, 9.0/16.0, 0.0/1.0, 1.0/16.0, 3.0/16.0], [0.0/1.0, 1.0/16.0, 3.0/16.0, 0.0/1.0, 3.0/16.0, 9.0/16.0], [0.0/1.0, 3.0/16.0, 1.0/16.0, 0.0/1.0, 9.0/16.0, 3.0/16.0]]], dtype=np.object)
	outerFaceShapeFunctionDerivatives  = np.array([[[[-1.0/1.0, -1.0/1.0, -7.0/12.0], [1.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 5.0/24.0]],[[-1.0/1.0, -1.0/1.0, -5.0/24.0], [1.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 1.0/1.0, -7.0/12.0], [0.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 7.0/12.0]],    [[-1.0/1.0, -1.0/1.0, -5.0/24.0], [1.0/1.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 1.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 0.0/1.0, 5.0/24.0]]],[[[0.0/1.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, -5.0/24.0], [-1.0/1.0, -1.0/1.0, 7.0/12.0], [1.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/1.0, 5.0/24.0]],[[0.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, -7.0/12.0], [0.0/1.0, 0.0/1.0, -5.0/24.0], [-1.0/1.0, -1.0/1.0, 5.0/24.0], [1.0/1.0, 0.0/1.0, 7.0/12.0], [0.0/1.0, 1.0/1.0, 5.0/24.0]],    [[0.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, -5.0/24.0], [0.0/1.0, 0.0/1.0, -7.0/12.0], [-1.0/1.0, -1.0/1.0, 5.0/24.0], [1.0/1.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 1.0/1.0, 7.0/12.0]]],[[[-3.0/4.0, -3.0/4.0, -3.0/4.0], [3.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 3.0/4.0, -1.0/4.0], [-1.0/4.0, -1.0/4.0, 3.0/4.0], [1.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/4.0, 1.0/4.0]],[[-1.0/4.0, -1.0/4.0, -3.0/4.0], [1.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/4.0, -1.0/4.0], [-3.0/4.0, -3.0/4.0, 3.0/4.0], [3.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 3.0/4.0, 1.0/4.0]],[[-1.0/4.0, -1.0/4.0, -1.0/4.0], [1.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/4.0, -3.0/4.0], [-3.0/4.0, -3.0/4.0, 1.0/4.0], [3.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 3.0/4.0, 3.0/4.0]],    [[-3.0/4.0, -3.0/4.0, -1.0/4.0], [3.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 3.0/4.0, -3.0/4.0], [-1.0/4.0, -1.0/4.0, 1.0/4.0], [1.0/4.0, 0.0/1.0, 0.0/1.0], [0.0/1.0, 1.0/4.0, 3.0/4.0]]],[[[-3.0/4.0, -3.0/4.0, -3.0/4.0], [3.0/4.0, 0.0/1.0, -1.0/4.0], [0.0/1.0, 3.0/4.0, 0.0/1.0], [-1.0/4.0, -1.0/4.0, 3.0/4.0], [1.0/4.0, 0.0/1.0, 1.0/4.0], [0.0/1.0, 1.0/4.0, 0.0/1.0]],[[-3.0/4.0, -3.0/4.0, -1.0/4.0], [3.0/4.0, 0.0/1.0, -3.0/4.0], [0.0/1.0, 3.0/4.0, 0.0/1.0], [-1.0/4.0, -1.0/4.0, 1.0/4.0], [1.0/4.0, 0.0/1.0, 3.0/4.0], [0.0/1.0, 1.0/4.0, 0.0/1.0]],[[-1.0/4.0, -1.0/4.0, -1.0/4.0], [1.0/4.0, 0.0/1.0, -3.0/4.0], [0.0/1.0, 1.0/4.0, 0.0/1.0], [-3.0/4.0, -3.0/4.0, 1.0/4.0], [3.0/4.0, 0.0/1.0, 3.0/4.0], [0.0/1.0, 3.0/4.0, 0.0/1.0]],    [[-1.0/4.0, -1.0/4.0, -3.0/4.0], [1.0/4.0, 0.0/1.0, -1.0/4.0], [0.0/1.0, 1.0/4.0, 0.0/1.0], [-3.0/4.0, -3.0/4.0, 3.0/4.0], [3.0/4.0, 0.0/1.0, 1.0/4.0], [0.0/1.0, 3.0/4.0, 0.0/1.0]]],[[[-3.0/4.0, -3.0/4.0, 0.0/1.0], [3.0/4.0, 0.0/1.0, -3.0/4.0], [0.0/1.0, 3.0/4.0, -1.0/4.0], [-1.0/4.0, -1.0/4.0, 0.0/1.0], [1.0/4.0, 0.0/1.0, 3.0/4.0], [0.0/1.0, 1.0/4.0, 1.0/4.0]],[[-3.0/4.0, -3.0/4.0, 0.0/1.0], [3.0/4.0, 0.0/1.0, -1.0/4.0], [0.0/1.0, 3.0/4.0, -3.0/4.0], [-1.0/4.0, -1.0/4.0, 0.0/1.0], [1.0/4.0, 0.0/1.0, 1.0/4.0], [0.0/1.0, 1.0/4.0, 3.0/4.0]],[[-1.0/4.0, -1.0/4.0, 0.0/1.0], [1.0/4.0, 0.0/1.0, -1.0/4.0], [0.0/1.0, 1.0/4.0, -3.0/4.0], [-3.0/4.0, -3.0/4.0, 0.0/1.0], [3.0/4.0, 0.0/1.0, 1.0/4.0], [0.0/1.0, 3.0/4.0, 3.0/4.0]],    [[-1.0/4.0, -1.0/4.0, 0.0/1.0], [1.0/4.0, 0.0/1.0, -3.0/4.0], [0.0/1.0, 1.0/4.0, -1.0/4.0], [-3.0/4.0, -3.0/4.0, 0.0/1.0], [3.0/4.0, 0.0/1.0, 3.0/4.0], [0.0/1.0, 3.0/4.0, 1.0/4.0]]]], dtype=np.object)

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 6 then it's a Prism.
		"""
		if len(element.vertices) == 6:
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		# Vertices indexes
		b = elementVertices[ (Prism.innerFaceNeighborVertices[local])[0] ]
		f = elementVertices[ (Prism.innerFaceNeighborVertices[local])[1] ]
		q = elementVertices[ (Prism.innerFaceNeighborVertices[local])[2] ]
		w = elementVertices[ (Prism.innerFaceNeighborVertices[local])[3] ]
		e = elementVertices[ (Prism.innerFaceNeighborVertices[local])[4] ]
		r = elementVertices[ (Prism.innerFaceNeighborVertices[local])[5] ]
		# Element centroid
		x0, y0, z0 = elementCentroid.getCoordinates()
		# Facet [f-b-q-w] centroid
		x1, y1, z1 = ( (b + f + q + w)/4.0 ).getCoordinates()
		# Edge [f-b] midpoint
		x2, y2, z2 = ( (b + f)/2.0 ).getCoordinates()
		# Facet [f-b-e] or [f-b-e-r] centroid
		if local < 6:
			x3, y3, z3 = ( (b + f + e)/3.0 ).getCoordinates()
		else:
			x3, y3, z3 = ( (b + f + e + r)/4.0 ).getCoordinates()
		# Face area vector components
		x = 0.5 * ((y1-y0)*(z3-z0) - (y3-y0)*(z1-z0) + (y3-y2)*(z1-z2) - (y1-y2)*(z3-z2))
		y = 0.5 * ((x3-x0)*(z1-z0) - (x1-x0)*(z3-z0) + (x1-x2)*(z3-z2) - (x3-x2)*(z1-z2))
		z = 0.5 * ((x1-x0)*(y3-y0) - (x3-x0)*(y1-y0) + (x3-x2)*(y1-y2) - (x1-x2)*(y3-y2))
		return Point(x, y, z)

class Pyramid(Shape):
	dimension						   = 3
	numberOfInnerFaces				   = 8
	numberOfFacets 					   = 5
	subelementTransformedVolumes	   = np.array([1.0/18.0, 1.0/18.0, 1.0/18.0, 1.0/18.0, 1.0/9.0])
	innerFaceShapeFunctionValues	   = np.array([[13.0/36.0, 13.0/36.0, 1.0/12.0, 1.0/12.0, 1.0/9.0], [1.0/12.0, 13.0/36.0, 13.0/36.0, 1.0/12.0, 1.0/9.0], [1.0/12.0, 1.0/12.0, 13.0/36.0, 13.0/36.0, 1.0/9.0], [13.0/36.0, 1.0/12.0, 1.0/12.0, 13.0/36.0, 1.0/9.0], [6.0/17.0, 5.0/34.0, 25.0/408.0, 5.0/34.0, 7.0/24.0], [5.0/34.0, 6.0/17.0, 5.0/34.0, 25.0/408.0, 7.0/24.0], [25.0/408.0, 5.0/34.0, 6.0/17.0, 5.0/34.0, 7.0/24.0], [5.0/34.0, 25.0/408.0, 5.0/34.0, 6.0/17.0, 7.0/24.0]])
	innerFaceShapeFunctionDerivatives  = np.array([[[-13.0/16.0, -1.0/2.0, -1.0/4.0], [13.0/16.0, -1.0/2.0, -1.0/4.0], [3.0/16.0, 1.0/2.0, -1.0/4.0], [-3.0/16.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/2.0, -3.0/16.0, -1.0/4.0], [1.0/2.0, -13.0/16.0, -1.0/4.0], [1.0/2.0, 13.0/16.0, -1.0/4.0], [-1.0/2.0, 3.0/16.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-3.0/16.0, -1.0/2.0, -1.0/4.0], [3.0/16.0, -1.0/2.0, -1.0/4.0], [13.0/16.0, 1.0/2.0, -1.0/4.0], [-13.0/16.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/2.0, -13.0/16.0, -1.0/4.0], [1.0/2.0, -3.0/16.0, -1.0/4.0], [1.0/2.0, 3.0/16.0, -1.0/4.0], [-1.0/2.0, 13.0/16.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-12.0/17.0, -12.0/17.0, -60.0/289.0], [12.0/17.0, -5.0/17.0, -169.0/578.0], [5.0/17.0, 5.0/17.0, -60.0/289.0], [-5.0/17.0, 12.0/17.0, -169.0/578.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-12.0/17.0, -5.0/17.0, -169.0/578.0], [12.0/17.0, -12.0/17.0, -60.0/289.0], [5.0/17.0, 12.0/17.0, -169.0/578.0], [-5.0/17.0, 5.0/17.0, -60.0/289.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-5.0/17.0, -5.0/17.0, -60.0/289.0], [5.0/17.0, -12.0/17.0, -169.0/578.0], [12.0/17.0, 12.0/17.0, -60.0/289.0], [-12.0/17.0, 5.0/17.0, -169.0/578.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-5.0/17.0, -12.0/17.0, -169.0/578.0], [5.0/17.0, -5.0/17.0, -60.0/289.0], [12.0/17.0, 5.0/17.0, -169.0/578.0], [-12.0/17.0, 12.0/17.0, -60.0/289.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]])
	innerFaceNeighborVertices		   = np.array([[0, 1], [1, 2], [2, 3], [3, 0], [0, 4, 3, 1], [1, 4, 0, 2], [2, 4, 1, 3], [3, 4, 2, 0]], dtype=np.object)
	subelementShapeFunctionValues	   = np.array([[75.0/164.0, 55.0/328.0, 121.0/1968.0, 55.0/328.0, 7.0/48.0], [55.0/328.0, 75.0/164.0, 55.0/328.0, 121.0/1968.0, 7.0/48.0], [121.0/1968.0, 55.0/328.0, 75.0/164.0, 55.0/328.0, 7.0/48.0], [55.0/328.0, 121.0/1968.0, 55.0/328.0, 75.0/164.0, 7.0/48.0], [11.0/96.0, 11.0/96.0, 11.0/96.0, 11.0/96.0, 13.0/24.0]])
	subelementShapeFunctionDerivatives = np.array([[[-30.0/41.0, -30.0/41.0, -330.0/1681.0], [30.0/41.0, -11.0/41.0, -1021.0/3362.0], [11.0/41.0, 11.0/41.0, -330.0/1681.0], [-11.0/41.0, 30.0/41.0, -1021.0/3362.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-30.0/41.0, -11.0/41.0, -1021.0/3362.0], [30.0/41.0, -30.0/41.0, -330.0/1681.0], [11.0/41.0, 30.0/41.0, -1021.0/3362.0], [-11.0/41.0, 11.0/41.0, -330.0/1681.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-11.0/41.0, -11.0/41.0, -330.0/1681.0], [11.0/41.0, -30.0/41.0, -1021.0/3362.0], [30.0/41.0, 30.0/41.0, -330.0/1681.0], [-30.0/41.0, 11.0/41.0, -1021.0/3362.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-11.0/41.0, -30.0/41.0, -1021.0/3362.0], [11.0/41.0, -11.0/41.0, -330.0/1681.0], [30.0/41.0, 11.0/41.0, -1021.0/3362.0], [-30.0/41.0, 30.0/41.0, -330.0/1681.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]], [[-1.0/2.0, -1.0/2.0, -1.0/4.0], [1.0/2.0, -1.0/2.0, -1.0/4.0], [1.0/2.0, 1.0/2.0, -1.0/4.0], [-1.0/2.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]])
	facetVerticesIndexes 			   = np.array([[0, 4, 3], [0, 1, 4], [1, 2, 4], [2, 3, 4], [0, 3, 2, 1]], dtype=np.object)
	outerFaceShapeFunctionValues	   = np.array([[[7.0/12.0, 0.0/1.0, 0.0/1.0, 5.0/24.0, 5.0/24.0], [5.0/24.0, 0.0/1.0, 0.0/1.0, 5.0/24.0, 7.0/12.0], [5.0/24.0, 0.0/1.0, 0.0/1.0, 7.0/12.0, 5.0/24.0]], [[7.0/12.0, 5.0/24.0, 0.0/1.0, 0.0/1.0, 5.0/24.0], [5.0/24.0, 7.0/12.0, 0.0/1.0, 0.0/1.0, 5.0/24.0], [5.0/24.0, 5.0/24.0, 0.0/1.0, 0.0/1.0, 7.0/12.0]], [[0.0/1.0, 7.0/12.0, 5.0/24.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 5.0/24.0, 7.0/12.0, 0.0/1.0, 5.0/24.0], [0.0/1.0, 5.0/24.0, 5.0/24.0, 0.0/1.0, 7.0/12.0]], [[0.0/1.0, 0.0/1.0, 7.0/12.0, 5.0/24.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 5.0/24.0, 7.0/12.0, 5.0/24.0], [0.0/1.0, 0.0/1.0, 5.0/24.0, 5.0/24.0, 7.0/12.0]], [[9.0/16.0, 3.0/16.0, 1.0/16.0, 3.0/16.0, 0.0/1.0], [3.0/16.0, 1.0/16.0, 3.0/16.0, 9.0/16.0, 0.0/1.0], [1.0/16.0, 3.0/16.0, 9.0/16.0, 3.0/16.0, 0.0/1.0], [3.0/16.0, 9.0/16.0, 3.0/16.0, 1.0/16.0, 0.0/1.0]]], dtype=np.object)
	outerFaceShapeFunctionDerivatives  = np.array([[[[-14.0/19.0, -1.0/1.0, -5.0/38.0], [14.0/19.0, 0.0/1.0, -7.0/19.0], [5.0/19.0, 0.0/1.0, -5.0/38.0], [-5.0/19.0, 1.0/1.0, -7.0/19.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/2.0, -1.0/1.0, -1.0/4.0], [1.0/2.0, 0.0/1.0, -1.0/4.0], [1.0/2.0, 0.0/1.0, -1.0/4.0], [-1.0/2.0, 1.0/1.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-5.0/19.0, -1.0/1.0, -7.0/19.0], [5.0/19.0, 0.0/1.0, -5.0/38.0], [14.0/19.0, 0.0/1.0, -7.0/19.0], [-14.0/19.0, 1.0/1.0, -5.0/38.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-1.0/1.0, -14.0/19.0, -5.0/38.0], [1.0/1.0, -5.0/19.0, -7.0/19.0], [0.0/1.0, 5.0/19.0, -5.0/38.0], [0.0/1.0, 14.0/19.0, -7.0/19.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/1.0, -5.0/19.0, -7.0/19.0], [1.0/1.0, -14.0/19.0, -5.0/38.0], [0.0/1.0, 14.0/19.0, -7.0/19.0], [0.0/1.0, 5.0/19.0, -5.0/38.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/1.0, -1.0/2.0, -1.0/4.0], [1.0/1.0, -1.0/2.0, -1.0/4.0], [0.0/1.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-14.0/19.0, 0.0/1.0, -7.0/19.0], [14.0/19.0, -1.0/1.0, -5.0/38.0], [5.0/19.0, 1.0/1.0, -7.0/19.0], [-5.0/19.0, 0.0/1.0, -5.0/38.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-5.0/19.0, 0.0/1.0, -5.0/38.0], [5.0/19.0, -1.0/1.0, -7.0/19.0], [14.0/19.0, 1.0/1.0, -5.0/38.0], [-14.0/19.0, 0.0/1.0, -7.0/19.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-1.0/2.0, 0.0/1.0, -1.0/4.0], [1.0/2.0, -1.0/1.0, -1.0/4.0], [1.0/2.0, 1.0/1.0, -1.0/4.0], [-1.0/2.0, 0.0/1.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[0.0/1.0, -5.0/19.0, -5.0/38.0], [0.0/1.0, -14.0/19.0, -7.0/19.0], [1.0/1.0, 14.0/19.0, -5.0/38.0], [-1.0/1.0, 5.0/19.0, -7.0/19.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[0.0/1.0, -14.0/19.0, -7.0/19.0], [0.0/1.0, -5.0/19.0, -5.0/38.0], [1.0/1.0, 5.0/19.0, -7.0/19.0], [-1.0/1.0, 14.0/19.0, -5.0/38.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[0.0/1.0, -1.0/2.0, -1.0/4.0], [0.0/1.0, -1.0/2.0, -1.0/4.0], [1.0/1.0, 1.0/2.0, -1.0/4.0], [-1.0/1.0, 1.0/2.0, -1.0/4.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]],[[[-3.0/4.0, -3.0/4.0, -3.0/16.0], [3.0/4.0, -1.0/4.0, -5.0/16.0], [1.0/4.0, 1.0/4.0, -3.0/16.0], [-1.0/4.0, 3.0/4.0, -5.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/4.0, -3.0/4.0, -5.0/16.0], [1.0/4.0, -1.0/4.0, -3.0/16.0], [3.0/4.0, 1.0/4.0, -5.0/16.0], [-3.0/4.0, 3.0/4.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],[[-1.0/4.0, -1.0/4.0, -3.0/16.0], [1.0/4.0, -3.0/4.0, -5.0/16.0], [3.0/4.0, 3.0/4.0, -3.0/16.0], [-3.0/4.0, 1.0/4.0, -5.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]],    [[-3.0/4.0, -1.0/4.0, -5.0/16.0], [3.0/4.0, -3.0/4.0, -3.0/16.0], [1.0/4.0, 3.0/4.0, -5.0/16.0], [-1.0/4.0, 1.0/4.0, -3.0/16.0], [0.0/1.0, 0.0/1.0, 1.0/1.0]]]], dtype=np.object)

	@staticmethod
	def _is(element) -> bool:
		"""
		Tells whether that element is compatible with the shape.
		If the number of vertices is equal to 5 then it's a Pyramid.
		"""
		if len(element.vertices) == 5:
			return True
		else:
			return False

	@staticmethod
	def getInnerFaceAreaVector(local, elementCentroid, elementVertices):
		# Vertices indices
		b = Pyramid.innerFaceNeighborVertices[local][0]
		f = Pyramid.innerFaceNeighborVertices[local][1]
		# Base centroid
		x0 = 0.25 * (elementVertices[0].x + elementVertices[1].x + elementVertices[2].x + elementVertices[3].x)
		y0 = 0.25 * (elementVertices[0].y + elementVertices[1].y + elementVertices[2].y + elementVertices[3].y)
		z0 = 0.25 * (elementVertices[0].z + elementVertices[1].z + elementVertices[2].z + elementVertices[3].z)
		# Edge {f-b} midpoint	
		x2 = 0.5 * (elementVertices[b].x + elementVertices[f].x)
		y2 = 0.5 * (elementVertices[b].y + elementVertices[f].y)
		z2 = 0.5 * (elementVertices[b].z + elementVertices[f].z)
		if local < 4:
			# Facet {f-b-4} centroid
			x1 = (elementVertices[b].x + elementVertices[f].x + elementVertices[4].x) / 3.0
			y1 = (elementVertices[b].y + elementVertices[f].y + elementVertices[4].y) / 3.0
			z1 = (elementVertices[b].z + elementVertices[f].z + elementVertices[4].z) / 3.0
			# Face area vector components
			x = 0.5 * ((y1-y0)*(z2-z0) - (y2-y0)*(z1-z0))
			y = 0.5 * ((x2-x0)*(z1-z0) - (x1-x0)*(z2-z0))
			z = 0.5 * ((x1-x0)*(y2-y0) - (x2-x0)*(y1-y0))
		
		else:
			# Auxiliar vertices
			q = Pyramid.innerFaceNeighborVertices[local][2]
			w = Pyramid.innerFaceNeighborVertices[local][3]
			# Facet {f-b-q} centroid
			x1 = (elementVertices[b].x + elementVertices[f].x + elementVertices[q].x) / 3.0
			y1 = (elementVertices[b].y + elementVertices[f].y + elementVertices[q].y) / 3.0
			z1 = (elementVertices[b].z + elementVertices[f].z + elementVertices[q].z) / 3.0
			# Facet {f-b-w} centroid
			x3 = (elementVertices[b].x + elementVertices[f].x + elementVertices[w].x) / 3.0
			y3 = (elementVertices[b].y + elementVertices[f].y + elementVertices[w].y) / 3.0
			z3 = (elementVertices[b].z + elementVertices[f].z + elementVertices[w].z) / 3.0
			# Face area vector components
			x = 0.5 * ((y1-y0)*(z3-z0) - (y3-y0)*(z1-z0) + (y3-y2)*(z1-z2) - (y1-y2)*(z3-z2))
			y = 0.5 * ((x3-x0)*(z1-z0) - (x1-x0)*(z3-z0) + (x1-x2)*(z3-z2) - (x3-x2)*(z1-z2))
			z = 0.5 * ((x1-x0)*(y3-y0) - (x3-x0)*(y1-y0) + (x3-x2)*(y1-y2) - (x1-x2)*(y3-y2))
		
		return Point(x, y, z)
